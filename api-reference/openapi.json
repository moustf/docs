{
  "openapi": "3.0.1",
  "info": {
    "title": "Hamsa API",
    "description": "Trying out our transcription and media-to-text APIs",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api-dev.tryhamsa.com"
    }
  ],
  "paths": {
    "/v1/projects/statistics/numbers": {
      "get": {
        "summary": "Get project statistics with numbers",
        "parameters": [
          {
            "name": "startPeriod",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": true
          },
          {
            "name": "endPeriod",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": true
          },
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NumbersStatisticsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/projects/statistics/chart": {
      "get": {
        "summary": "Get project statistics chart data",
        "parameters": [
          {
            "name": "startPeriod",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": true
          },
          {
            "name": "endPeriod",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": true
          },
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChartResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/jobs/transcribe": {
      "post": {
        "summary": "Transcribe media to text",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscriptRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscriptResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Server Side Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/jobs/ai-content": {
      "post": {
        "summary": "Create AI Content",
        "parameters": [
          {
            "name": "jobId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiContentPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AiContentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "summary": "Get AI-generated content",
        "parameters": [
          {
            "name": "jobId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AiContentSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/jobs/all": {
      "post": {
        "summary": "Get a list of jobs",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/jobs": {
      "get": {
        "summary": "Retrieve job details",
        "parameters": [
          {
            "name": "jobId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "speaker",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of job details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "Job not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/projects/by-api-key": {
      "get": {
        "summary": "Get a project by API key",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/jobs/ai-content/custom": {
      "post": {
        "summary": "Generate Customized AI Content",
        "description": "Generates AI content based on the specified transcription job ID and parameters.",
        "operationId": "generateCustomizedAIContent",
        "parameters": [
          {
            "name": "jobId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "aiParts": {
                    "type": "array",
                    "description": "The AI parts to generate content for. AI parts array should have at least one AI part object, with an aiPart (title), the language to return the content for the part in, and the prompt to use.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "aiPart": {
                          "type": "string",
                          "description": "The AI part title for the content. The AI part title must be unique for the job.",
                          "minLength": 1
                        },
                        "language": {
                          "type": "string",
                          "description": "The language to return the content for the part in. The language must be one either 'ar' or 'en'.",
                          "enum": [
                            "ar",
                            "en"
                          ]
                        },
                        "prompt": {
                          "type": "string",
                          "description": "The prompt to use for generating the content of the AI part. Please make sure to use descriptive and appropriate instructions here to get the best content possible."
                        }
                      },
                      "required": [
                        "aiPart",
                        "language",
                        "prompt"
                      ]
                    },
                    "minLength": 1
                  },
                  "webhookUrl": {
                    "type": "string",
                    "format": "uri",
                    "nullable": true
                  },
                  "webhookAuth": {
                    "type": "object",
                    "description": "Authorization header to be sent in this format: `Authorization: [authKey] [authSecret]`",
                    "properties": {
                      "authKey": {
                        "type": "string",
                        "example": "Token",
                        "nullable": true
                      },
                      "authSecret": {
                        "type": "string",
                        "example": "Secret",
                        "nullable": true
                      }
                    }
                  }
                },
                "required": [
                  "aiParts"
                ]
              }
            }
          },
          "description": "Parameters for generating AI content."
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AiContentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/jobs/ai-content/estimate": {
      "get": {
        "summary": "Estimate AI Content Cost",
        "description": "Returns the estimated cost for the specified AI content job.",
        "operationId": "estimateAIContentCost",
        "parameters": [
          {
            "name": "jobId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Transcription job ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cost estimate retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/voice-agents": {
      "post": {
        "summary": "Create a new voice agent",
        "description": "Create a new voice agent to start using our powerful and robust voice assistant feature. This route requires an API key for authentication.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceAgentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "summary": "Retrieve a list of voice agents",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "take",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceAgentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/voice-agents/{voiceAgentId}": {
      "patch": {
        "summary": "Update an existing voice agent",
        "parameters": [
          {
            "name": "voiceAgentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVoiceAgentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "summary": "Retrieve a specific voice agent by ID",
        "parameters": [
          {
            "name": "voiceAgentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/voice-agents/templates": {
      "get": {
        "summary": "Retrieve a specific voice agent by ID",
        "description": "Use this route to get the voice agent templates created by our experts. You can take the template id and use clone voice agent route to create a new voice agent based on the template.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceAgentTemplatesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/voice-agents/call": {
      "post": {
        "summary": "Initiate a call with a voice agent",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful call initiation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/voice-agents/clone": {
      "post": {
        "summary": "Clone a voice agent",
        "description": "Use this route to clone an existing agent. You can use it to clone one of the voice agents templates created by our experts!",
        "parameters": [
          {
            "name": "voiceAgentId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "agentName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful cloning of voice agent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloneResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "403": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "404": {
            "description": "Voice agent not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/jobs/text-to-speech": {
      "post": {
        "summary": "Initiate a text to speech job",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TTSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TTSResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Server Side Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/realtime/tts": {
      "post": {
        "summary": "Generates an audio file from a text string (not streamed).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RtTtsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "audio/wav": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Server Side Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/realtime/tts-stream": {
      "post": {
        "summary": "Generates a streamed audio file from a text string.",
        "description": "From the user's perspective, this is a standard request. In the response, we include specific headers: 'Transfer-Encoding' is set to 'chunked' to enable streaming, 'Connection' is set to 'keep-alive' to maintain the connection, and 'Content-Type' is set to 'audio/wav' to indicate the media type. These headers allow the client to stream audio data from the server in real time.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RtTtsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Streamed Successful Response - Chunked",
            "content": {
              "stream": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "example": "00000000: 52 49 46 46 FF FF FF FF 57 41 56 45 66 6D 74 20 ",
                  "x-streaming": true
                }
              }
            },
            "headers": {
              "Transfer-Encoding": {
                "description": "Indicates that the response uses chunked transfer encoding - streamed.",
                "schema": {
                  "type": "string",
                  "example": "chunked"
                }
              },
              "Connection": {
                "description": "Indicates that the server will keep the connection open for streaming.",
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Server Side Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Stream and play audio chunks",
            "source": "fetch('https://api-dev.tryhamsa.com/v1/realtime/tts-stream', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Token YOUR_API_KEY'\n  },\n  body: JSON.stringify({ speaker: 'Ali', dialect: 'pls', text: 'Hello, world!', mulaw: false })\n})\n.then(response => {\n  const reader = response.body.getReader();\n  const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n  const chunks = [];\n\n  function read() {\n    reader.read().then(({ done, value }) => {\n      if (done) {\n        // Optionally concatenate chunks and play entire stream\n        const blob = new Blob(chunks, { type: 'audio/wav' });\n        const url = URL.createObjectURL(blob);\n        const audio = new Audio(url);\n        audio.play();\n        return;\n      }\n\n      chunks.push(value);\n      read();\n    });\n  }\n\n  read();\n})\n.catch(console.error);"
          }
        ]
      }
    },
    "/v1/realtime/stt": {
      "post": {
        "summary": "Generates an speech to text transcription (not streamed).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RtSttRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "string",
                      "description": "The generated text of the speech audio list."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Server Side Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/voice-agents/twilio/phone-number": {
      "post": {
        "summary": "Add Twilio phone number to a user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTwilioNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddTwilioNumberResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Server Side Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/voice-agents/twilio/assign-number": {
      "post": {
        "summary": "Assign Twilio phone number to a Voice Agent.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignTwilioNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddTwilioNumberResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Server Side Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/voice-agents/twilio/phone-number/list": {
      "get": {
        "summary": "Return a list of Twilio phone numbers for a user.",
        "parameters": [
          {
            "name": "voiceAgentId",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Optional UUID of the voice agent to filter associated Twilio numbers.",
              "example": "d949f13f-40d2-4e48-ac86-b66633070603"
            },
            "required": false
          },
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Optional boolean-like string indicating whether to fetch active Twilio numbers. Defaults to 'true'.",
              "example": "true"
            },
            "required": false
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Page number for pagination. Defaults to '1'.",
              "example": "1"
            },
            "required": false
          },
          {
            "name": "take",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Number of items to take for pagination. Defaults to '10'.",
              "example": "10"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUserTwilioPhoneNumbersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Server Side Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/voice-agents/twilio/call": {
      "post": {
        "summary": "Call Voice Agent using Twilio custom phone number.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallTwilioNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallTwilioNumberResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          },
          "500": {
            "description": "Server Side Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorSchema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "StatisticsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "string",
            "default": "success"
          },
          "data": {
            "$ref": "#/components/schemas/StatisticsData"
          }
        }
      },
      "TTSRequest": {
        "type": "object",
        "properties": {
          "voiceId": {
            "type": "string",
            "description": "The voice id taken from the paly ground TTS voice dropdown component on the dashboard"
          },
          "text": {
            "type": "string",
            "example": "Minimum 5 words text to speech content!",
            "description": "The text you want to convert to speech. Minimum 5 words text to speech content!"
          },
          "webhookUrl": {
            "type": "string",
            "format": "uri",
            "description": "The webhook url to which the TTS job result will be sent."
          },
          "webhookAuth": {
            "$ref": "#/components/schemas/ExternalWebhookAuthScheme"
          }
        }
      },
      "TTSResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "string",
            "default": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AI_CONTENT",
                  "TRANSCRIPTION",
                  "TTS",
                  "TRANSLATION"
                ]
              },
              "mediaUrl": {
                "type": "string",
                "format": "uri"
              },
              "webhookUrl": {
                "type": "string",
                "format": "uri"
              },
              "model": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "COMPLETED",
                  "FAILED"
                ]
              },
              "jobResponse": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string"
                  },
                  "ttsMediaFile": {
                    "type": "string",
                    "format": "uri"
                  }
                }
              },
              "totalCost": {
                "type": "number"
              },
              "apiKeyId": {
                "type": "string"
              },
              "userId": {
                "type": "string"
              },
              "ttsVoiceId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "StatisticsData": {
        "type": "object",
        "properties": {
          "requests": {
            "$ref": "#/components/schemas/StatisticItem"
          },
          "transcription": {
            "$ref": "#/components/schemas/StatisticItem"
          },
          "tokens": {
            "$ref": "#/components/schemas/StatisticItem"
          }
        }
      },
      "StatisticItem": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "integer"
          },
          "isTimeValue": {
            "type": "boolean"
          }
        }
      },
      "ChartResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "string",
            "default": "success"
          },
          "data": {
            "$ref": "#/components/schemas/ChartData"
          }
        }
      },
      "ChartData": {
        "type": "object",
        "properties": {
          "cost": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartDataItem"
            }
          },
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartDataItem"
            }
          },
          "transcription": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartDataItem"
            }
          },
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartDataItem"
            }
          }
        }
      },
      "ChartDataItem": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "number"
          },
          "unit": {
            "type": "string"
          }
        }
      },
      "NumbersStatisticsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "string",
            "default": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "tokens": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "integer"
                  },
                  "unit": {
                    "type": "string"
                  }
                }
              },
              "transcription": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number"
                  },
                  "unit": {
                    "type": "string"
                  }
                }
              },
              "price": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number"
                  },
                  "unit": {
                    "type": "string"
                  }
                }
              },
              "requests": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string"
                  },
                  "unit": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "ExternalWebhookAuthScheme": {
        "type": "object",
        "description": "Authorization header to be sent in this format: `Authorization: [authKey] [authSecret]`",
        "properties": {
          "authKey": {
            "type": "string",
            "example": "Token",
            "nullable": true
          },
          "authSecret": {
            "type": "string",
            "example": "Secret",
            "nullable": true
          }
        }
      },
      "TranscriptRequest": {
        "type": "object",
        "properties": {
          "mediaUrl": {
            "type": "string",
            "format": "uri"
          },
          "processingType": {
            "type": "string",
            "enum": [
              "async"
            ],
            "default": "async"
          },
          "webhookUrl": {
            "type": "string",
            "format": "uri"
          },
          "webhookAuth": {
            "$ref": "#/components/schemas/ExternalWebhookAuthScheme"
          },
          "title": {
            "type": "string"
          },
          "model": {
            "type": "string",
            "enum": [
              "hamsa-v1-general",
              "Hamsa-V1.5-alpha"
            ]
          },
          "language": {
            "type": "string",
            "enum": [
              "ar",
              "en"
            ],
            "default": "ar"
          },
          "returnSrtFormat": {
            "type": "boolean",
            "default": false
          },
          "srtOptions": {
            "type": "object",
            "description": "You can override srtOptions default values and send the object only if returnSrtFormat is false.",
            "properties": {
              "maxLinesPerSubtitle": {
                "type": "integer",
                "example": 2,
                "default": 2
              },
              "singleSpeakerPerSubtitle": {
                "type": "boolean",
                "default": true,
                "example": true
              },
              "maxCharsPerLine": {
                "type": "integer",
                "example": 42,
                "default": 42
              },
              "maxMergeableGap": {
                "type": "number",
                "example": 0.3,
                "default": 0.3
              },
              "minDuration": {
                "type": "number",
                "example": 0.7,
                "default": 0.7
              },
              "maxDuration": {
                "type": "number",
                "example": 7,
                "default": 7
              },
              "minGap": {
                "type": "number",
                "example": 0.04,
                "default": 0.04
              }
            }
          }
        },
        "required": [
          "mediaUrl",
          "model"
        ]
      },
      "TranscriptResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "jobId": {
                "type": "string"
              }
            },
            "required": [
              "jobId"
            ]
          }
        }
      },
      "JobsRequest": {
        "type": "object",
        "properties": {
          "sort": {
            "$ref": "#/components/schemas/SortOptions"
          },
          "take": {
            "type": "integer",
            "minimum": 1
          },
          "skip": {
            "type": "integer",
            "minimum": 1
          },
          "search": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "COMPLETED",
              "FAILED"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "TRANSCRIPTION",
              "TRANSLATION",
              "TTS",
              "AI_CONTENT"
            ]
          }
        }
      },
      "SortOptions": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "enum": [
              "createdAt",
              "model",
              "totalCost",
              "usageTime",
              "status"
            ]
          },
          "direction": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        }
      },
      "JobsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "string",
            "default": "success"
          },
          "data": {
            "$ref": "#/components/schemas/JobsData"
          }
        }
      },
      "JobsData": {
        "type": "object",
        "properties": {
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Job"
            }
          },
          "total": {
            "type": "integer"
          },
          "filtered": {
            "type": "integer"
          }
        }
      },
      "Job": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "AI_CONTENT",
              "TRANSCRIPTION",
              "TTS",
              "TRANSLATION"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "COMPLETED",
              "FAILED"
            ]
          },
          "cost": {
            "type": "number"
          },
          "systemModelKey": {
            "type": "string"
          },
          "relevantJobId": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "apiKey": {
                "type": "string"
              },
              "mediaUrl": {
                "type": "string",
                "format": "uri"
              },
              "model": {
                "type": "string"
              },
              "agentName": {
                "type": "string"
              },
              "duration": {
                "type": "number"
              },
              "voice": {
                "type": "string"
              },
              "aiContentParts": {
                "type": "array",
                "enum": [
                  "introduction",
                  "titles",
                  "summary",
                  "webArticleSEOFriendly",
                  "keyTopicsWithBullets",
                  "keyTopicsWithBullets",
                  "keywords",
                  "threadsByInstagram",
                  "faq",
                  "facebookPost",
                  "youtubeDescription",
                  "twitterThread",
                  "linkedInPost"
                ]
              },
              "sourceJob": {
                "type": "string"
              }
            },
            "required": [
              "apiKey"
            ]
          },
          "apiKey": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "title",
          "type",
          "url",
          "status",
          "cost",
          "systemModelKey",
          "relevantJobId",
          "attributes",
          "createdAt",
          "updatedAt"
        ]
      },
      "ProjectResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "string",
            "default": "success"
          },
          "data": {
            "$ref": "#/components/schemas/Project"
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "deletedBy": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updteAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AiContentResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "string",
            "default": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "model": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AI_CONTENT"
                ]
              },
              "processingType": {
                "type": "string"
              },
              "webhookUrl": {
                "type": "string"
              },
              "totalCost": {
                "type": "number"
              },
              "usageTime": {
                "type": "string"
              },
              "mediaUrl": {
                "type": "string",
                "format": "uri"
              },
              "jobResponse": {
                "type": "object",
                "default": null
              },
              "status": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "COMPLETED",
                  "FAILED"
                ]
              },
              "relevantJobId": {
                "type": "string"
              },
              "apiKeyId": {
                "type": "string"
              },
              "billingId": {
                "type": "string"
              },
              "userId": {
                "type": "string"
              },
              "systemModelKey": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "AiContentPayload": {
        "type": "object",
        "properties": {
          "aiParts": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "introduction",
                "titles",
                "summary",
                "webArticleSEOFriendly",
                "keyTopicsWithBullets",
                "keyTopicsWithBullets",
                "keywords",
                "threadsByInstagram",
                "faq",
                "facebookPost",
                "youtubeDescription",
                "twitterThread",
                "linkedInPost"
              ]
            }
          }
        }
      },
      "AiContentSuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "string",
            "default": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "model": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "processingType": {
                "type": "string"
              },
              "webhookUrl": {
                "type": "string"
              },
              "totalCost": {
                "type": "number"
              },
              "usageTime": {
                "type": "string"
              },
              "mediaUrl": {
                "type": "string"
              },
              "jobResponse": {
                "type": "object",
                "properties": {
                  "faq": {
                    "type": "string"
                  },
                  "titles": {
                    "type": "string"
                  },
                  "summary": {
                    "type": "string"
                  },
                  "keywords": {
                    "type": "string"
                  },
                  "facebookPost": {
                    "type": "string"
                  },
                  "introduction": {
                    "type": "string"
                  },
                  "linkedInPost": {
                    "type": "string"
                  },
                  "twitterThread": {
                    "type": "string"
                  },
                  "threadsByInstagram": {
                    "type": "string"
                  },
                  "transcriptionJobId": {
                    "type": "string"
                  },
                  "youtubeDescription": {
                    "type": "string"
                  },
                  "keyTopicsWithBullets": {
                    "type": "string"
                  },
                  "webArticleSEOFriendly": {
                    "type": "string"
                  }
                }
              },
              "status": {
                "type": "string"
              },
              "relevantJobId": {
                "type": "string"
              },
              "apiKeyId": {
                "type": "string"
              },
              "billingId": {
                "type": "string"
              },
              "userId": {
                "type": "string"
              },
              "systemModelKey": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "VoiceAgentRequest": {
        "type": "object",
        "properties": {
          "agentName": {
            "type": "string"
          },
          "greetingMessage": {
            "description": "Greeting Message can be customized by adding params like: {{name}}, to make the message more personal!",
            "type": "string",
            "default": "Hello, how can I help you today?"
          },
          "preamble": {
            "description": "Preamble can be customized by adding params like: {{agentName}}, to make the prompt more specific and context aware!",
            "type": "string",
            "default": "You are a helpful assistant that will answer users questions."
          },
          "lang": {
            "type": "string",
            "enum": [
              "ar",
              "en"
            ],
            "default": "ar"
          },
          "pokeMessages": {
            "description": "The messages to say to the user when he doesn't respond!",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "realTime": {
            "type": "boolean",
            "default": false
          },
          "silenceThreshold": {
            "type": "integer",
            "default": 800,
            "minimum": 1,
            "description": "The silence threshold in milliseconds. Minimum value is 1 millisecond."
          },
          "interrupt": {
            "type": "boolean",
            "default": false
          },
          "outcome": {
            "description": "A prompt to take the conversation and transform it to anything you like, like creating an article out of the conversation!",
            "type": "string",
            "default": null
          },
          "webhookUrl": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "https://example.com/webhook"
          },
          "webhookAuth": {
            "$ref": "#/components/schemas/ExternalWebhookAuthScheme"
          },
          "outcomeResponseShape": {
            "type": "object",
            "title": "Outcome Response Schema",
            "description": "Recursive OpenAPI-style shape with 'type', 'properties', 'required', 'items', ...etc. Please refer to the `OpenAPI Outcome Response Instructions` above for more information.",
            "example": {
              "type": "object",
              "properties": {
                "test": {
                  "type": "number",
                  "description": "Hello world from Hamsa AI!"
                }
              },
              "required": [
                "test"
              ]
            }
          },
          "voiceId": {
            "description": "You can find predefined voices in the voice agents dashboard, under the language tab",
            "type": "string",
            "enum": [
              "1f3396aa-24e3-4523-b4ef-7dd4adb8fab9",
              "29709a36-7703-497f-b6e5-0d39b873f77d",
              "37665327-bfc7-4edf-a362-596a379865dc",
              "60ef35b1-056a-47d9-8f8f-6571f2106560",
              "8f14b3ee-beb6-4f9a-9819-02b45f7d48ff",
              "a2404aca-2c6d-47c7-ae9c-5ea317a30e60",
              "b1d24f8c-6d60-4fb5-8d06-708ba1bc89c2",
              "d23c0832-a642-4a59-8e93-fd0924abc46e",
              "d981c03a-2868-4de2-b097-e11ec231413c"
            ]
          },
          "tools": {
            "type": "object",
            "properties": {
              "genderDetection": {
                "type": "boolean",
                "default": false
              },
              "smartCallEnd": {
                "type": "boolean",
                "default": false
              }
            }
          },
          "params": {
            "description": "Set the params you define in the greeting message or preamble fields here, the key is the same as the param and the value is the param value. Press 'Add new property' below to set the param name then press enter, after that add the value.",
            "type": "object",
            "default": {}
          }
        },
        "required": [
          "agentName"
        ]
      },
      "VoiceAgentResponseData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "agentName": {
            "type": "string"
          },
          "greetingMessage": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "preamble": {
            "type": "string"
          },
          "lang": {
            "type": "string"
          },
          "pokeMessages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "realTime": {
            "type": "boolean"
          },
          "silenceThreshold": {
            "type": "integer"
          },
          "interrupt": {
            "type": "boolean"
          },
          "outcome": {
            "type": "string"
          },
          "outcomeResponseShape": {
            "type": "object",
            "example": {
              "type": "object",
              "properties": {
                "test": {
                  "type": "number",
                  "description": "Hello world from Hamsa AI!"
                }
              },
              "required": [
                "test"
              ]
            }
          },
          "projectId": {
            "type": "string"
          },
          "apiKeyId": {
            "type": "string"
          },
          "voiceRecordId": {
            "type": "string",
            "nullable": true
          },
          "voiceRecord": {
            "type": "object",
            "description": "The voice record object which is connected to this agent.",
            "nullable": true
          },
          "webhookUrl": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "https://example.com/webhook"
          },
          "webhookAuth": {
            "$ref": "#/components/schemas/ExternalWebhookAuthScheme"
          },
          "params": {
            "type": "object",
            "description": "The parameters that are created for this agent."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "VoiceAgentResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "string",
            "default": "success"
          },
          "data": {
            "$ref": "#/components/schemas/VoiceAgentResponseData"
          }
        }
      },
      "UpdateVoiceAgentRequest": {
        "type": "object",
        "properties": {
          "agentName": {
            "type": "string"
          },
          "greetingMessage": {
            "description": "Greeting Message can be customized by adding params like: {{name}}, to make the message more personal!",
            "type": "string"
          },
          "preamble": {
            "description": "Preamble can be customized by adding params like: {{agentName}}, to make the prompt more specific and context aware!"
          },
          "lang": {
            "type": "string",
            "enum": [
              "ar",
              "en"
            ]
          },
          "pokeMessages": {
            "description": "The messages to say to the user when he doesn't respond!",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "realTime": {
            "type": "boolean"
          },
          "silenceThreshold": {
            "type": "integer"
          },
          "interrupt": {
            "type": "boolean"
          },
          "outcome": {
            "description": "A prompt to take the conversation and transform it to anything you like, like creating an article out of the conversation!",
            "type": "string"
          },
          "outcomeResponseShape": {
            "type": "object",
            "title": "Outcome Response Schema",
            "description": "Recursive OpenAPI-style shape with 'type', 'properties', 'required', 'items', ...etc. Please refer to the `OpenAPI Outcome Response Instructions` above for more information.",
            "example": {
              "type": "object",
              "properties": {
                "test": {
                  "type": "number",
                  "description": "Hello world from Hamsa AI!"
                }
              },
              "required": [
                "test"
              ]
            },
            "additionalProperties": true
          },
          "webhookUrl": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "https://example.com/webhook"
          },
          "webhookAuth": {
            "$ref": "#/components/schemas/ExternalWebhookAuthScheme"
          },
          "voiceId": {
            "description": "You can find predefined voices in the voice agents dashboard, under the language tab",
            "type": "string",
            "enum": [
              "1f3396aa-24e3-4523-b4ef-7dd4adb8fab9",
              "29709a36-7703-497f-b6e5-0d39b873f77d",
              "37665327-bfc7-4edf-a362-596a379865dc",
              "60ef35b1-056a-47d9-8f8f-6571f2106560",
              "8f14b3ee-beb6-4f9a-9819-02b45f7d48ff",
              "a2404aca-2c6d-47c7-ae9c-5ea317a30e60",
              "b1d24f8c-6d60-4fb5-8d06-708ba1bc89c2",
              "d23c0832-a642-4a59-8e93-fd0924abc46e",
              "d981c03a-2868-4de2-b097-e11ec231413c"
            ]
          },
          "tools": {
            "type": "object",
            "properties": {
              "genderDetection": {
                "type": "boolean",
                "default": false
              },
              "smartCallEnd": {
                "type": "boolean",
                "default": false
              }
            }
          },
          "params": {
            "description": "Set the params you define in the greeting message or preamble fields here, the key is the same as the param and the value is the param value. Press 'Add new property' below to set the param name then press enter, after that add the value.",
            "type": "object"
          }
        }
      },
      "VoiceAgentsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "string",
            "default": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              },
              "filtered": {
                "type": "integer"
              },
              "voiceAgents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VoiceAgentResponseData"
                }
              }
            }
          }
        }
      },
      "CallRequest": {
        "type": "object",
        "properties": {
          "toNumber": {
            "type": "string",
            "description": "The number that you want to call"
          },
          "fromNumber": {
            "type": "string",
            "enum": [
              "+18449292835",
              "+18558961879"
            ]
          },
          "agentDetails": {
            "$ref": "#/components/schemas/VoiceAgentRequest",
            "description": "Send agentDetails instead of voiceAgentId and params.",
            "default": {}
          },
          "voiceAgentId": {
            "type": "string",
            "nullable": true
          },
          "params": {
            "type": "object",
            "description": "Params set in the voice agent's greeting message or preamble. Send when using voiceAgentId only.",
            "additionalProperties": true,
            "default": {}
          },
          "webhookUrl": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "https://example.com/webhook"
          },
          "webhookAuth": {
            "$ref": "#/components/schemas/ExternalWebhookAuthScheme"
          }
        },
        "anyOf": [
          {
            "required": [
              "voiceAgentId",
              "params",
              "fromNumber",
              "toNumber"
            ],
            "not": {
              "required": [
                "agentDetails"
              ]
            }
          },
          {
            "required": [
              "agentDetails",
              "fromNumber",
              "toNumber"
            ],
            "not": {
              "required": [
                "voiceAgentId",
                "params"
              ]
            }
          }
        ]
      },
      "CallResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "string",
            "default": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string",
                "nullable": true
              },
              "model": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "processingType": {
                "type": "string"
              },
              "webhookUrl": {
                "type": "string",
                "nullable": true
              },
              "totalCost": {
                "type": "number"
              },
              "usageTime": {
                "type": "string",
                "nullable": true
              },
              "fromLng": {
                "type": "string",
                "nullable": true
              },
              "toLng": {
                "type": "string",
                "nullable": true
              },
              "mediaUrl": {
                "type": "string",
                "nullable": true
              },
              "jobResponse": {
                "type": "object",
                "nullable": true
              },
              "fromScript": {
                "type": "string",
                "nullable": true
              },
              "toScript": {
                "type": "string",
                "nullable": true
              },
              "status": {
                "type": "string"
              },
              "relevantJobId": {
                "type": "string",
                "nullable": true
              },
              "agentDetails": {
                "$ref": "#/components/schemas/VoiceAgentResponseData"
              },
              "apiKeyId": {
                "type": "string"
              },
              "billingId": {
                "type": "string"
              },
              "systemModelKey": {
                "type": "string",
                "nullable": true
              },
              "voiceAgentId": {
                "type": "string",
                "nullable": true
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "VoiceAgentTemplatesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "string",
            "default": "success"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "agentName": {
                  "type": "string"
                },
                "greetingMessage": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "preamble": {
                  "type": "string"
                },
                "lang": {
                  "type": "string"
                },
                "voice": {
                  "type": "string",
                  "enum": [
                    "ar-msa",
                    "en-default",
                    "ar-gulf"
                  ]
                },
                "pokeMessages": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "realTime": {
                  "type": "boolean"
                },
                "silenceThreshold": {
                  "type": "integer"
                },
                "interrupt": {
                  "type": "boolean"
                },
                "outcome": {
                  "type": "string",
                  "nullable": true
                },
                "isTemplate": {
                  "type": "boolean"
                },
                "icon": {
                  "type": "string",
                  "format": "uri"
                },
                "projectId": {
                  "type": "string"
                },
                "apiKeyId": {
                  "type": "string"
                },
                "voiceRecordId": {
                  "type": "string",
                  "nullable": true
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      },
      "CloneResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "string",
            "default": "success"
          },
          "data": {
            "$ref": "#/components/schemas/VoiceAgentResponseData"
          }
        }
      },
      "JobResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "previewUrl": {
            "type": "string",
            "format": "uri"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "model": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "processingType": {
                "type": "string"
              },
              "webhookUrl": {
                "type": "string",
                "nullable": true
              },
              "totalCost": {
                "type": "number"
              },
              "usageTime": {
                "type": "string"
              },
              "fromLng": {
                "type": "string",
                "nullable": true
              },
              "toLng": {
                "type": "string",
                "nullable": true
              },
              "mediaUrl": {
                "type": "string",
                "format": "uri"
              },
              "jobResponse": {
                "type": "object",
                "nullable": true
              },
              "fromScript": {
                "type": "string",
                "nullable": true
              },
              "toScript": {
                "type": "string",
                "nullable": true
              },
              "status": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "COMPLETED",
                  "FAILED"
                ]
              },
              "relevantJobId": {
                "type": "string",
                "nullable": true
              },
              "agentDetails": {
                "type": "string",
                "nullable": true
              },
              "apiKeyId": {
                "type": "string"
              },
              "billingId": {
                "type": "string"
              },
              "systemModelKey": {
                "type": "string"
              },
              "voiceAgentId": {
                "type": "string",
                "nullable": true
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "title",
              "model",
              "type",
              "processingType",
              "totalCost",
              "usageTime",
              "status",
              "apiKeyId",
              "billingId",
              "systemModelKey",
              "createdAt",
              "updatedAt"
            ]
          }
        }
      },
      "RtTtsRequest": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The text to be generated as an aduio file.",
            "example": "مرحباً بكم في جميعاً في همسة!"
          },
          "speaker": {
            "type": "string",
            "description": "The speaker name, this field's value can be taken from the dashboard voice agents section.",
            "enum": [
              "Amjad",
              "Lyali",
              "Salma",
              "Mariam",
              "Dalal",
              "Lana",
              "Jasem",
              "Samir",
              "Carla",
              "Nada",
              "Mais",
              "Fatma",
              "Hiba",
              "Ali",
              "Layan",
              "Khadija",
              "Mazen",
              "Dima",
              "Majd",
              "Talin",
              "Ahmed",
              "Rema",
              "Fahd",
              "Rami"
            ],
            "example": "Majd"
          },
          "dialect": {
            "type": "string",
            "enum": [
              "pls",
              "leb",
              "jor",
              "syr",
              "ksa",
              "bah",
              "uae",
              "egy",
              "irq"
            ],
            "description": "The dialect of each country by its country code. Recommended voices per dialect are: pls (Palestinian): Amjad, Layan, Talin, Rema, Ali; leb (Lebanese): Carla, Majd; jor (Jordanian): Lana, Jasem, Nada; syr (Syrian): Dalal, Mais; ksa (Saudi): Hiba, Khadija, Fahd, Jasem; bah (Bahraini): Mazen; uae (Emirati): Salma, Dima; egy (Egyptian): Mariam, Samir, Nada, Ali, Ahmed; irq (Iraqi): Lyali, Fatma.",
            "example": "pls"
          },
          "mulaw": {
            "type": "boolean",
            "description": "Whether to use 'Mu-Law' algorithm in voice signal processing or not.",
            "example": false,
            "default": false
          }
        },
        "required": [
          "text",
          "speaker"
        ]
      },
      "RtSttRequest": {
        "type": "object",
        "properties": {
          "audioList": {
            "type": "array",
            "description": "The audio list that contains the audio data as numbers of type float. Audio data should be of type WAV. You can not send this field and audioBase64 together!",
            "items": {
              "type": "number",
              "description": "Float numbers which represents the audio data."
            }
          },
          "audioBase64": {
            "type": "string",
            "description": "The audio base64 string that contains the audio data. Audio data should be of type WAV. You can not send this field and audioList together!",
            "example": "GkXfo59ChoEBQveBAULygQRC84EIQoKEd2VibUKHgQRChYECGFOAZwH ..."
          },
          "language": {
            "type": "string",
            "enum": [
              "ar",
              "en"
            ],
            "default": "ar"
          },
          "isEosEnabled": {
            "type": "boolean",
            "description": "Whether to enable End of Speech detection or not.",
            "default": false
          },
          "eosThreshold": {
            "type": "number",
            "description": "The threshold value for End of Speech detection.",
            "default": 0.3
          }
        }
      },
      "TwilioPhoneNumberRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "d949f13f-40d2-4e48-ac86-b66633070603"
          },
          "number": {
            "type": "string",
            "example": "+9700000000"
          },
          "label": {
            "type": "string",
            "example": "My Twilio Number"
          },
          "numberSid": {
            "type": "string",
            "example": "PNXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "userId": {
            "type": "string",
            "example": "d949f13f-40d2-4e48-ac86-b66633070603"
          },
          "voiceAgentId": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "createdAt": {
            "type": "string",
            "example": "2023-01-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-02-01T12:00:00Z"
          }
        }
      },
      "AddTwilioNumberRequest": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "The phone number to add to the Twilio numbers of a user.",
            "example": "+9700000000",
            "pattern": "^\\+[1-9]\\d{1,14}$"
          },
          "label": {
            "type": "string",
            "description": "A label to identify the phone number.",
            "example": "Support Line"
          },
          "twilioNumberSid": {
            "type": "string",
            "description": "The Twilio Number SID associated with the phone number.",
            "example": "PNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
          },
          "twilioAccountSid": {
            "type": "string",
            "description": "The Twilio Account SID associated with the Twilio number.",
            "example": "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
          },
          "twilioAuthToken": {
            "type": "string",
            "description": "The Twilio Auth Token for authenticating API requests.",
            "example": "your_twilio_auth_token"
          }
        },
        "required": [
          "phoneNumber",
          "label",
          "twilioNumberSid",
          "twilioAccountSid",
          "twilioAuthToken"
        ]
      },
      "AddTwilioNumberResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Success"
          },
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/TwilioPhoneNumberRecord"
          }
        }
      },
      "AssignTwilioNumberRequest": {
        "type": "object",
        "properties": {
          "voiceAgentId": {
            "type": "string",
            "example": "d949f13f-40d2-4e48-ac86-b66633070603"
          },
          "twilioPhoneNumber": {
            "type": "string",
            "example": "+9700000000"
          }
        },
        "required": [
          "voiceAgentId",
          "twilioPhoneNumber"
        ]
      },
      "AssignTwilioNumberResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Success"
          },
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/TwilioPhoneNumberRecord"
          }
        }
      },
      "ListUserTwilioPhoneNumbersResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Success"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TwilioPhoneNumberRecord"
            }
          }
        }
      },
      "CallTwilioNumberRequest": {
        "type": "object",
        "properties": {
          "toNumber": {
            "type": "string",
            "description": "The number that you want to call"
          },
          "twilioPhoneNumber": {
            "type": "string",
            "example": "+1234567890",
            "pattern": "^\\+[1-9]\\d{1,14}$"
          },
          "agentDetails": {
            "$ref": "#/components/schemas/VoiceAgentRequest",
            "description": "Send agentDetails instead of voiceAgentId and params.",
            "default": {
              "agentName": ""
            }
          },
          "voiceAgentId": {
            "type": "string",
            "nullable": true
          },
          "params": {
            "type": "object",
            "description": "Params set in the voice agent's greeting message or preamble. Send when using voiceAgentId only.",
            "additionalProperties": true,
            "default": {}
          },
          "webhookUrl": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "https://example.com/webhook"
          },
          "webhookAuth": {
            "$ref": "#/components/schemas/ExternalWebhookAuthScheme"
          }
        },
        "anyOf": [
          {
            "required": [
              "voiceAgentId",
              "params",
              "twilioPhoneNumber",
              "toNumber"
            ],
            "not": {
              "required": [
                "agentDetails"
              ]
            }
          },
          {
            "required": [
              "agentDetails",
              "twilioPhoneNumber",
              "toNumber"
            ],
            "not": {
              "required": [
                "voiceAgentId",
                "params"
              ]
            }
          }
        ]
      },
      "CallTwilioNumberResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "string",
            "default": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string",
                "nullable": true
              },
              "model": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "processingType": {
                "type": "string"
              },
              "webhookUrl": {
                "type": "string",
                "nullable": true
              },
              "totalCost": {
                "type": "number"
              },
              "usageTime": {
                "type": "string",
                "nullable": true
              },
              "fromLng": {
                "type": "string",
                "nullable": true
              },
              "toLng": {
                "type": "string",
                "nullable": true
              },
              "mediaUrl": {
                "type": "string",
                "nullable": true
              },
              "jobResponse": {
                "type": "object",
                "nullable": true
              },
              "fromScript": {
                "type": "string",
                "nullable": true
              },
              "toScript": {
                "type": "string",
                "nullable": true
              },
              "status": {
                "type": "string"
              },
              "relevantJobId": {
                "type": "string",
                "nullable": true
              },
              "callParams": {
                "type": "object",
                "nullable": true,
                "example": {
                  "machineNumber": "+1234567890",
                  "userNumber": "+1234567890"
                }
              },
              "agentDetails": {
                "$ref": "#/components/schemas/VoiceAgentResponseData"
              },
              "apiKeyId": {
                "type": "string"
              },
              "billingId": {
                "type": "string"
              },
              "systemModelKey": {
                "type": "string",
                "nullable": true
              },
              "voiceAgentId": {
                "type": "string",
                "nullable": true
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Pass the API key in the Authorization header, You need to put Token keyword before the API key. e.g. 'Authorization: Token <api-key>'"
      }
    }
  }
}